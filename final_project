CREATE TABLE wojewodztwa (
  kod_wojewodztwa varchar(2) NOT NULL,
  nazwa_wojewodztwa varchar(50) NOT NULL,
  PRIMARY KEY (kod_wojewodztwa)
);

CREATE TABLE powiaty (
  kod_powiatu varchar(4) NOT NULL,
  kod_wojewodztwa varchar(2) NOT NULL,
  nazwa_powiatu varchar(50) NOT NULL,
  PRIMARY KEY (kod_powiatu),
  KEY kod_wojewodztwa (kod_wojewodztwa),
);

CREATE TABLE gminy (
  kod_gminy varchar(8) NOT NULL,
  kod_powiatu varchar(4) NOT NULL,
  nazwa_gminy varchar(80) NOT NULL,
  PRIMARY KEY (kod_gminy),
  FOREIGN KEY (kod_powiatu) REFERENCES powiaty(kod_powiatu)
  );
  
 CREATE TABLE obreby_ewidencyjne (
  kod_obrebu_ewidencyjnego varchar(13) NOT NULL,
  kod_gminy varchar(8) NOT NULL,
  PRIMARY KEY (kod_obrebu_ewidencyjnego),
  FOREIGN KEY (kod_gminy) REFERENCES gminy(kod_gminy)
);

CREATE TABLE rejestr_gruntow(
  kod_dzialki varchar(24) NOT NULL,
  powierzchnia_dzialki decimal(10,0) NOT NULL,
  numer_KW varchar(16) NOT NULL,
  numer_arkusza_mapy varchar(12) NOT NULL,
  kod_obrebu_ewidencyjnego varchar(13) NOT NULL,
  PRIMARY KEY (kod_dzialki),
  FOREIGN KEY (kod_obrebu_ewidencyjnego) REFERENCES obreby_ewidencyjne(kod_obrebu_ewidencyjnego)
 );
 
CREATE TABLE rejestr_KW (
  numer_KW varchar(16) NOT NULL,
  data_wpisu date NOT NULL,
  PRIMARY KEY (numer_KW)
);

CREATE TABLE rejestr_budynkow (
  kod_budynku varchar(24) NOT NULL,
  kod_dzialki varchar(24) NOT NULL,
  powierzchnia_budynku decimal(10,0) NOT NULL,
  PRIMARY KEY (kod_budynku)
);

CREATE TABLE rejestr_wlascicieli (
  PESEL varchar(13) NOT NULL,
  imie varchar(30) NOT NULL,
  nazwisko varchar(30) NOT NULL,
  adres varchar(80) NOT NULL,
  PRIMARY KEY (PESEL)
);

CREATE TABLE rejestr_wlasnosci (
  numer_KW varchar(16) NOT NULL,
  PESEL varchar(13) NOT NULL,
  FOREIGN KEY (PESEL) REFERENCES rejestr_wlascicieli(PESEL),
  FOREIGN KEY (numer_KW) REFERENCES rejestr_KW(numer_KW)
)

CREATE TABLE ewidencja_podatkowa (
  kod_gminy varchar(8) NOT NULL,
  podatek_od_gruntu decimal(10,0) NOT NULL,
  podatek_od_budynku decimal(10,0) NOT NULL,
  wskaznik_biologiczny decimal(10,0) NOT NULL,
  PRIMARY KEY (kod_gminy),
  FOREIGN KEY (kod_gminy) REFERENCES gminy(kod_gminy)
)

CREATE TABLE komunikaty (
  tresc_komunikatu varchar(255) NOT NULL,
  data_komunikatu DATE NOT NULL
);

ALTER TABLE rejestr_gruntow  
ADD(FOREIGN KEY (numer_KW) REFERENCES rejestr_KW(numer_KW));

ALTER TABLE rejestr_budynkow  
ADD(FOREIGN KEY (kod_dzialki) REFERENCES rejestr_gruntow(kod_dzialki));

ALTER TABLE rejestr_budynkow  
ADD(przeznaczenie_budynku VARCHAR(3) NOT NULL);

ALTER TABLE rejestr_wlasnosci 
ADD(PRIMARY KEY (numer_KW, PESEL));

INSERT INTO wojewodztwa (kod_wojewodztwa, nazwa_wojewodztwa) VALUES ('01', 'podlaskie');
INSERT INTO wojewodztwa (kod_wojewodztwa, nazwa_wojewodztwa) VALUES ('02', 'warminsko-mazurskie');
INSERT INTO wojewodztwa (kod_wojewodztwa, nazwa_wojewodztwa) VALUES ('03', 'mazowieckie');

INSERT INTO powiaty (kod_powiatu, kod_wojewodztwa, nazwa_powiatu) VALUES ('0104', '01', 'kolnenski');
INSERT INTO powiaty (kod_powiatu, kod_wojewodztwa, nazwa_powiatu) VALUES ('0202', '02', 'm.Olsztyn');
INSERT INTO powiaty (kod_powiatu, kod_wojewodztwa, nazwa_powiatu) VALUES ('0307', '03', 'ostrolecki');
INSERT INTO powiaty (kod_powiatu, kod_wojewodztwa, nazwa_powiatu) VALUES ('0109', '01', 'monski');
INSERT INTO powiaty (kod_powiatu, kod_wojewodztwa, nazwa_powiatu) VALUES ('0203', '02', 'elcki');
INSERT INTO powiaty (kod_powiatu, kod_wojewodztwa, nazwa_powiatu) VALUES ('0301', '03', 'makowski');

INSERT INTO gminy (kod_gminy, kod_powiatu, nazwa_gminy) VALUES ('041201_2', '0104', 'Turosl');
INSERT INTO gminy (kod_gminy, kod_powiatu, nazwa_gminy) VALUES ('020201_1', '0202', 'm.Olsztyn');
INSERT INTO gminy (kod_gminy, kod_powiatu, nazwa_gminy) VALUES ('010405_1', '0104', 'Kolno');
INSERT INTO gminy (kod_gminy, kod_powiatu, nazwa_gminy) VALUES ('010407_2', '0104', 'Maly Plock');
INSERT INTO gminy (kod_gminy, kod_powiatu, nazwa_gminy) VALUES ('030711_1', '0307', 'Myszyniec');
INSERT INTO gminy (kod_gminy, kod_powiatu, nazwa_gminy) VALUES ('030722_1', '0307', 'Lyse');

INSERT INTO obreby_ewidencyjne  (kod_obrebu_ewidencyjnego, kod_gminy) VALUES ('041201_2.0001', '041201_2');
INSERT INTO obreby_ewidencyjne  (kod_obrebu_ewidencyjnego, kod_gminy) VALUES ('041201_2.0002', '041201_2');
INSERT INTO obreby_ewidencyjne  (kod_obrebu_ewidencyjnego, kod_gminy) VALUES ('041201_2.0003', '041201_2');
INSERT INTO obreby_ewidencyjne  (kod_obrebu_ewidencyjnego, kod_gminy) VALUES ('030711_1.0011', '030711_1');
INSERT INTO obreby_ewidencyjne  (kod_obrebu_ewidencyjnego, kod_gminy) VALUES ('030711_1.0012', '030711_1');
INSERT INTO obreby_ewidencyjne  (kod_obrebu_ewidencyjnego, kod_gminy) VALUES ('030711_1.0013', '030711_1');


INSERT INTO rejestr_KW (numer_KW, data_wpisu) VALUES ('KW/15as/21/12', TO_DATE('2021-12-11','YYYY-MM-DD'));
INSERT INTO rejestr_KW (numer_KW, data_wpisu) VALUES ('KW/15ab/22/03', TO_DATE('2022-03-11','YYYY-MM-DD'));
INSERT INTO rejestr_KW (numer_KW, data_wpisu) VALUES ('KW/12ab/18/03', TO_DATE('2018-03-11','YYYY-MM-DD'));
INSERT INTO rejestr_KW (numer_KW, data_wpisu) VALUES ('KW/12ab/20/07', TO_DATE('2020-07-11','YYYY-MM-DD'));
INSERT INTO rejestr_KW (numer_KW, data_wpisu) VALUES ('KW/14as/21/12', TO_DATE('2021-12-11','YYYY-MM-DD'));
INSERT INTO rejestr_KW (numer_KW, data_wpisu) VALUES ('KW/14ab/22/03', TO_DATE('2022-03-11','YYYY-MM-DD'));
INSERT INTO rejestr_KW (numer_KW, data_wpisu) VALUES ('KW/14ab/18/03', TO_DATE('2018-03-11','YYYY-MM-DD'));
INSERT INTO rejestr_KW (numer_KW, data_wpisu) VALUES ('KW/14ab/20/07', TO_DATE('2020-07-11','YYYY-MM-DD'));

INSERT INTO rejestr_gruntow  (kod_dzialki, powierzchnia_dzialki, numer_KW, numer_arkusza_mapy, kod_obrebu_ewidencyjnego) VALUES ('041201_2.0001.26/2', 0.2222, 'KW/15as/21/12', 'AC-GD-52-256', '041201_2.0001');
INSERT INTO rejestr_gruntow  (kod_dzialki, powierzchnia_dzialki, numer_KW, numer_arkusza_mapy, kod_obrebu_ewidencyjnego) VALUES ('041201_2.0001.26/1', 0.3822, 'KW/15ab/22/03', 'AC-GD-52-256', '041201_2.0001');
INSERT INTO rejestr_gruntow  (kod_dzialki, powierzchnia_dzialki, numer_KW, numer_arkusza_mapy, kod_obrebu_ewidencyjnego) VALUES ('041201_2.0001.25', 1.3252, 'KW/12ab/18/03', 'AC-GD-52-156', '041201_2.0001');
INSERT INTO rejestr_gruntow  (kod_dzialki, powierzchnia_dzialki, numer_KW, numer_arkusza_mapy, kod_obrebu_ewidencyjnego) VALUES ('041201_2.0001.128', 0.1502, 'KW/12ab/20/07', 'AC-GD-52-156', '041201_2.0001');
INSERT INTO rejestr_gruntow  (kod_dzialki, powierzchnia_dzialki, numer_KW, numer_arkusza_mapy, kod_obrebu_ewidencyjnego) VALUES('030711_1.0011.29/2', 0.2112, 'KW/14as/21/12', 'AC-GD-52-256', '030711_1.0011');
INSERT INTO rejestr_gruntow  (kod_dzialki, powierzchnia_dzialki, numer_KW, numer_arkusza_mapy, kod_obrebu_ewidencyjnego) VALUES('030711_1.0011.29/1', 0.7423, 'KW/14ab/22/03', 'AC-GD-52-256', '030711_1.0011');
INSERT INTO rejestr_gruntow  (kod_dzialki, powierzchnia_dzialki, numer_KW, numer_arkusza_mapy, kod_obrebu_ewidencyjnego) VALUES('030711_1.0011.222', 1.0092, 'KW/14ab/18/03', 'AC-CD-52-156', '030711_1.0011');
INSERT INTO rejestr_gruntow  (kod_dzialki, powierzchnia_dzialki, numer_KW, numer_arkusza_mapy, kod_obrebu_ewidencyjnego) VALUES('030711_1.0011.163', 0.1102, 'KW/14ab/20/07', 'AC-CD-52-156', '030711_1.0011');


INSERT INTO ewidencja_podatkowa  (kod_gminy, podatek_od_gruntu, podatek_od_budynku, wskaznik_biologiczny) VALUES('041201_2', 0.56, 1.36, 0.5);
INSERT INTO ewidencja_podatkowa  (kod_gminy, podatek_od_gruntu, podatek_od_budynku, wskaznik_biologiczny) VALUES('030711_1', 0.96, 1.95, 0.4);

INSERT INTO rejestr_budynkow (kod_budynku, kod_dzialki, powierzchnia_budynku, przeznaczenie_budynku) VALUES('041201_2.0001.26/2.1', '041201_2.0001.26/2', 0.0120, 'B');
INSERT INTO rejestr_budynkow (kod_budynku, kod_dzialki, powierzchnia_budynku, przeznaczenie_budynku) VALUES('041201_2.0001.26/1.1', '041201_2.0001.26/1', 0.0110, 'B');
INSERT INTO rejestr_budynkow (kod_budynku, kod_dzialki, powierzchnia_budynku, przeznaczenie_budynku) VALUES('041201_2.0001.26/1.2', '041201_2.0001.26/1', 0.0210, 'H');
INSERT INTO rejestr_budynkow (kod_budynku, kod_dzialki, powierzchnia_budynku, przeznaczenie_budynku) VALUES('041201_2.0001.128.1', '041201_2.0001.128', 0.0240, 'G');
INSERT INTO rejestr_budynkow (kod_budynku, kod_dzialki, powierzchnia_budynku, przeznaczenie_budynku) VALUES('041201_2.0001.128.2', '041201_2.0001.128', 0.0170, 'B');
INSERT INTO rejestr_budynkow (kod_budynku, kod_dzialki, powierzchnia_budynku, przeznaczenie_budynku) VALUES('041201_2.0001.128.3', '041201_2.0001.128', 0.0140, 'U');
INSERT INTO rejestr_budynkow (kod_budynku, kod_dzialki, powierzchnia_budynku, przeznaczenie_budynku) VALUES('041201_2.0001.128.4', '041201_2.0001.128', 0.0144, 'G');


INSERT INTO rejestr_wlascicieli (PESEL, imie, nazwisko, adres) VALUES ('87062300576','Damian','Krzychowski','Bieszkowice, ul. Białostocka 1');
INSERT INTO rejestr_wlascicieli (PESEL, imie, nazwisko, adres) VALUES ('64070321557','Emil','Pawlak','Wałcz,  ul. Grabowa 2');
INSERT INTO rejestr_wlascicieli (PESEL, imie, nazwisko, adres) VALUES ('83112987903','Józef','Bramowicz','Mirosławiec, ul. Szkolna 2');
INSERT INTO rejestr_wlascicieli (PESEL, imie, nazwisko, adres) VALUES ('76101621907','Krystian','Nowak','Gdańsk ul. Jesionowa 1');
INSERT INTO rejestr_wlascicieli (PESEL, imie, nazwisko, adres) VALUES ('78111121207','Janina','Nowak','Gdańsk ul. Jesionowa 1');


INSERT INTO rejestr_wlasnosci (numer_KW, PESEL) VALUES ('KW/15as/21/12', '87062300576');
INSERT INTO rejestr_wlasnosci (numer_KW, PESEL) VALUES ('KW/15ab/22/03', '87062300576');
INSERT INTO rejestr_wlasnosci (numer_KW, PESEL) VALUES ('KW/12ab/18/03', '64070321557');
INSERT INTO rejestr_wlasnosci (numer_KW, PESEL) VALUES ('KW/12ab/20/07', '64070321557');
INSERT INTO rejestr_wlasnosci (numer_KW, PESEL) VALUES ('KW/14as/21/12', '83112987903');
INSERT INTO rejestr_wlasnosci (numer_KW, PESEL) VALUES ('KW/14ab/22/03', '76101621907');
INSERT INTO rejestr_wlasnosci (numer_KW, PESEL) VALUES ('KW/14ab/18/03', '76101621907');
INSERT INTO rejestr_wlasnosci (numer_KW, PESEL) VALUES ('KW/14ab/22/03', '78111121207');
INSERT INTO rejestr_wlasnosci (numer_KW, PESEL) VALUES ('KW/14ab/18/03', '78111121207');
INSERT INTO rejestr_wlasnosci (numer_KW, PESEL) VALUES ('KW/14ab/20/07', '76101621907');


--procedury
--dodaj wlasciciela
create or replace PROCEDURE dodaj_wlasciciela(v_PESEL VARCHAR2, v_imie VARCHAR2, v_nazwisko VARCHAR2, v_adres VARCHAR2) IS
BEGIN
     INSERT INTO REJESTR_WLASCICIELI VALUES (v_PESEL, v_imie, v_nazwisko, v_adres);
     DBMS_OUTPUT.put_line('Dodano uzytkownika '||v_imie||' '||v_nazwisko);
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.put_line('Something wrong during the data adding process');
END;

BEGIN
	dodaj_wlasciciela('98010112345', 'Alicja', 'Olecka', 'Raj, 15-244 Raj');
END;


CREATE OR REPLACE FUNCTION znajdz_numer_KW 
	(v_kod_dzialki IN VARCHAR2) 
	RETURN VARCHAR2 IS 
v_numer_KW VARCHAR(24);

	cursor c1 is
	SELECT numer_KW
		FROM REJESTR_GRUNTOW rg
		WHERE KOD_DZIALKI = v_kod_dzialki;

BEGIN
	OPEN c1;
	FETCH c1 INTO v_numer_KW;
	IF c1%notfound THEN 
		v_numer_KW:='';
	END IF;
	return v_numer_KW;
EXCEPTION
WHEN OTHERS THEN
   raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
END znajdz_numer_KW;



BEGIN
	DBMS_OUTPUT.put_line(znajdz_numer_KW('041201_2.0001.26/2'));
END;

--procedury
--zmien wlasciciela dzialki

CREATE OR REPLACE Procedure zmien_wlasciciela (v_kod_dzialki IN varchar2, v_PESEL IN varchar2) IS
v_numer_KW2 VARCHAR(24);
brak_ksiegi EXCEPTION;

BEGIN
	v_numer_KW2:=ZNAJDZ_NUMER_KW(v_kod_dzialki);
	UPDATE REJESTR_WLASNOSCI
        SET PESEL = v_PESEL
        WHERE NUMER_KW  = v_numer_KW2;
    IF SQL%NOTFOUND THEN RAISE brak_ksiegi;
    ELSE
 	DBMS_OUTPUT.PUT_LINE('Nowy wlasciciel zostal przypisany');
 	END IF;
	EXCEPTION
    WHEN brak_ksiegi THEN
    DBMS_OUTPUT.put_line('Dla podanego numeru działki nie istnieje księga wieczysta.');
END zmien_wlasciciela;


BEGIN
	zmien_wlasciciela('041201_2.0001.26/2afafas', '98010112345');
END;

-- Funkcja sprawdzająca czy mozna wykonać podział działki (żadna z części nie powinna być mniejsza niż 0.0300ha)

CREATE OR REPLACE FUNCTION czy_mozliwy_podzial 
	(nowa_powierzchnia_dzialki IN NUMBER, numer_dzielonej_dzialki IN VARCHAR2) 
	RETURN NUMBER IS
powierzchnia_wybranej_dzialki NUMBER(10,4);
brak_dzialki EXCEPTION;

	cursor c1 is
	SELECT POWIERZCHNIA_DZIALKI  
		FROM REJESTR_GRUNTOW rg
		WHERE KOD_DZIALKI = numer_dzielonej_dzialki;

BEGIN
	OPEN c1;
	FETCH c1 INTO powierzchnia_wybranej_dzialki;
	IF SQL%NOTFOUND THEN RAISE brak_dzialki;
	ELSE
		DBMS_OUTPUT.put_line('Powierzchnia dzielonej dzialki: '||powierzchnia_wybranej_dzialki);
		IF 0.222 > (nowa_powierzchnia_dzialki + 0.0300) THEN RETURN 1;
		ELSE 
		DBMS_OUTPUT.put_line('Nie można podzielić działki w taki sposób.');
		RETURN 0;
		END IF;
	END IF;
	CLOSE c1;
EXCEPTION
WHEN brak_dzialki THEN
    DBMS_OUTPUT.put_line('Nie istnieje działka o wybranym numerze');
    RETURN 0;
WHEN OTHERS THEN
   raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
END czy_mozliwy_podzial;


BEGIN
	 DBMS_OUTPUT.put_line(czy_mozliwy_podzial(0.1000, '041201_2.0001.26/2fsgas'));
END;

-- logowanie komunikatow

CREATE OR REPLACE Procedure loguj_zdarzenie (komunikat IN varchar2) IS
BEGIN
     INSERT INTO komunikaty VALUES (komunikat, sysdate);
     DBMS_OUTPUT.put_line('Zapisano komunikat');
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.put_line('Something wrong during the data adding process');
END loguj_zdarzenie;

BEGIN
	 loguj_zdarzenie('Hello, World!');
END;


-- znajdz kod gminy o podanej nazwie i zaloguj zdarzenia

CREATE OR REPLACE FUNCTION znajdz_kod_gminy 
	(v_nazwa_gminy IN VARCHAR2) 
	RETURN VARCHAR2 IS 
v_kod_gminy VARCHAR(8);

	cursor c1 is
	SELECT KOD_GMINY
		FROM GMINY g
		WHERE NAZWA_GMINY  = v_nazwa_gminy;

BEGIN
	OPEN c1;
	FETCH c1 INTO v_kod_gminy;
	IF c1%notfound THEN 
		v_kod_gminy:='';
		DBMS_OUTPUT.put_line('Nie istnieje gmina o podanej nazwie.');
		loguj_zdarzenie('Szukano i nie znaleziono kodu gminy o nazwie '||v_nazwa_gminy);
	ELSE
		DBMS_OUTPUT.put_line('Kod gminy '||v_nazwa_gminy||' to '||v_kod_gminy);
		loguj_zdarzenie('Szukano i znaleziono kod gminy '||v_nazwa_gminy);
	END IF;
	return v_kod_gminy;
EXCEPTION
WHEN OTHERS THEN
   raise_application_error(-20001,'An error was encountered - '||SQLCODE||' -ERROR- '||SQLERRM);
END znajdz_kod_gminy;

BEGIN
	 DBMS_OUTPUT.put_line(znajdz_kod_gminy('Turosl'));
END;

-- funkcja obliczająca podatek

CREATE OR REPLACE FUNCTION oblicz_podatek 
	(v_powierzchnia_nieruchomosci IN NUMBER, v_stawka_podatku IN NUMBER) 
	RETURN NUMBER IS
wartosc_podatku NUMBER(5,2);

BEGIN
	wartosc_podatku:= v_powierzchnia_nieruchomosci*10000*v_stawka_podatku;
	RETURN wartosc_podatku;
END oblicz_podatek;

BEGIN
	 DBMS_OUTPUT.put_line(oblicz_podatek(0.222, 0.19));
END;

-- obliczanie podatku
CREATE OR REPLACE Procedure wyslij_noty_podatkowe (v_nazwa_gminy IN VARCHAR2 DEFAULT 'Turosl') IS
v_podatek_od_gruntu NUMBER(5,2);
v_kod_gminy VARCHAR(8);

	cursor c1 is
	SELECT PODATEK_OD_GRUNTU
		FROM EWIDENCJA_PODATKOWA ep 
		WHERE KOD_GMINY  = znajdz_kod_gminy(v_nazwa_gminy);
	
	cursor c2(v_podatek_od_gruntu NUMBER) is
	SELECT KOD_DZIALKI, POWIERZCHNIA_DZIALKI, oblicz_podatek(POWIERZCHNIA_DZIALKI, v_podatek_od_gruntu) AS "PODATEK"
		FROM REJESTR_GRUNTOW rg 
		WHERE KOD_DZIALKI LIKE ('%'||znajdz_kod_gminy(v_nazwa_gminy)||'%')
	wiersz_z_wynikami c2%ROWTYPE;

BEGIN
	 v_kod_gminy:=znajdz_kod_gminy(v_nazwa_gminy);
     DBMS_OUTPUT.put_line(v_kod_gminy);
    OPEN c1;
    
	FETCH c1 INTO v_podatek_od_gruntu;
	DBMS_OUTPUT.put_line(v_podatek_od_gruntu);
	IF c1%notfound THEN 
		v_podatek_od_gruntu:= 0.0;
	ELSE
		DBMS_OUTPUT.put_line('Wydruk kontrolny: ELSE');
		--OPEN c2(v_podatek_od_gruntu);
		--FETCH c2 INTO wiersz_z_wynikami;
		--CLOSE c2;
	END IF;
	CLOSE c1;
EXCEPTION
WHEN OTHERS THEN
	DBMS_OUTPUT.put_line('Błąd przy obliczaniu podatku');
END wyslij_noty_podatkowe;

BEGIN
	 wyslij_noty_podatkowe('Turosl');
END;



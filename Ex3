#1
DECLARE 
    numer_max departments.department_id%TYPE;
    v_department_name departments.department_name%TYPE;
BEGIN
    SELECT MAX(department_id) INTO numer_max FROM departments;
    DBMS_OUTPUT.put_line('Max id dzialu: ' || numer_max);
    v_department_name := 'EDUCATION';
    numer_max := numer_max + 10;
    INSERT INTO departments VALUES (numer_max, v_department_name, NULL, NULL);
EXCEPTION
WHEN  TOO_MANY_ROWS THEN
DBMS_OUTPUT.put_line('Your request returns more than one row');
END;

#2
DECLARE 
    numer_max departments.department_id%TYPE;
BEGIN
    SELECT MAX(department_id) INTO numer_max FROM departments;
    UPDATE departments SET location_id = 3000 where department_id = numer_max;
EXCEPTION
WHEN  TOO_MANY_ROWS THEN
DBMS_OUTPUT.put_line('Your request returns more than one row');
END;

#3
CREATE TABLE nowa (
  pole VARCHAR(2)
);

BEGIN
    FOR i IN 1..10
    LOOP
        IF i != 4 AND i != 6 THEN INSERT INTO nowa VALUES (i);    
        END IF;
    END LOOP;
END;

#4
DECLARE
	country_names countries%ROWTYPE;
BEGIN
	SELECT * INTO country_names FROM countries WHERE country_id = 'CA';
	DBMS_OUTPUT.put_line('Country name: ' || country_names.country_name);
	DBMS_OUTPUT.put_line('Region ID: ' || country_names.region_id);
END;

#5
DECLARE
	TYPE dep_ids IS TABLE OF departments.department_id%TYPE INDEX BY PLS_INTEGER;
	dep dep_ids;
BEGIN   
    SELECT department_id BULK COLLECT INTO dep FROM departments;
    FOR i IN 1..10
    LOOP
        DBMS_OUTPUT.put_line(dep(i));
    END LOOP;
END;

#6
DECLARE
	TYPE dep_ids IS TABLE OF departments%ROWTYPE INDEX BY PLS_INTEGER;
	dep dep_ids;
BEGIN   
    SELECT * BULK COLLECT INTO dep FROM departments;
    FOR i IN 1..10
    LOOP
        DBMS_OUTPUT.put_line(dep(i).department_id || ' ' || dep(i).department_name || ' ' || dep(i).manager_id || ' ' || dep(i).location_id);
    END LOOP;
END;

#7
DECLARE
	CURSOR wynagrodzenie IS
	SELECT last_name, salary FROM EMPLOYEES 
	WHERE department_id = 50;
    lname employees.last_name%TYPE;
    salary employees.salary%TYPE;
BEGIN
    OPEN wynagrodzenie;
    LOOP
        FETCH wynagrodzenie INTO lname, salary;
        EXIT WHEN wynagrodzenie%NOTFOUND;
        IF salary > 3100 THEN DBMS_OUTPUT.put_line(lname || ' nie dawać podwyżki');
        ELSE DBMS_OUTPUT.put_line(lname || ' dać podwyżkę');
        END IF;
    END LOOP;
    CLOSE wynagrodzenie;
END;

#8a
DECLARE
	CURSOR wyplaty(salary_min NUMBER, salary_max NUMBER, part_of_name CHAR) IS
	SELECT first_name, last_name, salary FROM EMPLOYEES 
	WHERE (salary BETWEEN salary_min AND salary_max) AND (UPPER(first_name) LIKE UPPER('%'||part_of_name||'%'));
    row_with_results wyplaty%ROWTYPE;
BEGIN
    OPEN wyplaty(1000, 5000, 'a');
    LOOP
        FETCH wyplaty INTO row_with_results;
        EXIT WHEN wyplaty%NOTFOUND;
        DBMS_OUTPUT.put_line(row_with_results.first_name||' '||row_with_results.last_name||' '||row_with_results.salary);
    END LOOP;
    CLOSE wyplaty;
END;

#8b
DECLARE
	CURSOR wyplaty(salary_min NUMBER, salary_max NUMBER, part_of_name CHAR) IS
	SELECT first_name, last_name, salary FROM EMPLOYEES 
	WHERE (salary BETWEEN salary_min AND salary_max) AND (UPPER(first_name) LIKE UPPER('%'||part_of_name||'%'));
    row_with_results wyplaty%ROWTYPE;
BEGIN
    OPEN wyplaty(5000, 20000, 'u');
    LOOP
        FETCH wyplaty INTO row_with_results;
        EXIT WHEN wyplaty%NOTFOUND;
        DBMS_OUTPUT.put_line(row_with_results.first_name||' '||row_with_results.last_name||' '||row_with_results.salary);
    END LOOP;
    CLOSE wyplaty;
END;

#9a
CREATE PROCEDURE add_jobs(v_job_id VARCHAR2, v_job_title VARCHAR2) IS
BEGIN
     INSERT INTO jobs VALUES(v_job_id, v_job_title, null, null);
     DBMS_OUTPUT.put_line('Added job_id: '||v_job_id||', job_title: '||v_job_title);
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.put_line('Something wrong during the data adding process');
END;


BEGIN
     add_jobs('LAW', 'Lawyer');
END;

#9b
create or replace PROCEDURE update_jobs_title(v_job_id VARCHAR2, v_job_title VARCHAR2) IS
no_jobs_updated EXCEPTION;
BEGIN
    UPDATE jobs
        SET job_title = v_job_title
        WHERE job_id = v_job_id;
    IF SQL%NOTFOUND THEN RAISE no_jobs_updated;
    ELSE 
    DBMS_OUTPUT.put_line('Changed the job title for: '||v_job_title);
    END IF;
    EXCEPTION
    WHEN no_jobs_updated THEN
    DBMS_OUTPUT.put_line('There is no ID '||v_job_id|| ' in database');
END;

BEGIN
	update_jobs_title('LAW', 'Lawyer2');
END;

#9c
create or replace PROCEDURE delete_jobs(v_job_id VARCHAR2) IS
no_jobs_deleted EXCEPTION;
BEGIN
    DELETE FROM jobs WHERE job_id = v_job_id;
    IF SQL%NOTFOUND THEN RAISE no_jobs_deleted;
    ELSE 
    DBMS_OUTPUT.put_line('An object with '||v_job_id|| ' ID was deleted.');
    END IF;
    EXCEPTION
    WHEN no_jobs_deleted THEN
    DBMS_OUTPUT.put_line('There is no Job wit ID '||v_job_id|| 'in database.');
END;

BEGIN
	delete_jobs('LAW');
END;

#9e
create or replace PROCEDURE add_employees(v_employee_id NUMBER DEFAULT NULL, 
    v_first_name VARCHAR2 DEFAULT NULL, v_last_name VARCHAR2 DEFAULT 'Kowalski', 
    v_email VARCHAR2 DEFAULT 'kowalski@kowalski.pl', v_phone_number VARCHAR2 DEFAULT NULL,
    v_hire_date DATE DEFAULT '2022-04-10', job_id VARCHAR2 DEFAULT 'Praca', v_salary NUMBER DEFAULT 2000,
    v_commission_pct NUMBER DEFAULT NULL,  v_manager_id NUMBER DEFAULT NULL,
    v_department_id NUMBER DEFAULT NULL) IS
b_employee_id NUMBER;
high_salary EXCEPTION;
BEGIN
    IF v_salary > 20000 THEN RAISE high_salary;
    ELSE
        SELECT max(employee_id) INTO v_max_employee_id FROM employees;
        v_max_employee_id := v_max_employee_id + 1;
        INSERT INTO employees VALUES(v_max_employee_id, v_first_name, v_last_name, v_email,
            v_phone_number, v_hire_date, job_id, v_salary, v_commission_pct, v_manager_id,
            v_department_id);
        DBMS_OUTPUT.put_line('New employee was added with '||v_max_employee_id);
    END IF;
    EXCEPTION
    WHEN high_salary THEN
    DBMS_OUTPUT.put_line('New employee cannot earn more than 20000.');
END;

